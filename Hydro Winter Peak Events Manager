definition(
    name: "Hydro Winter Peak Events Manager",
    namespace: "Hydro",
    author: "MZiegler",
    description: "Gère les commutateurs en fonction des événements de pointe définis par Hydro-Québec pour la saison hivernale.",
    category: "Convenience",
    iconUrl: "",
    iconX2Url: "",
    iconX3Url: ""
)

preferences {
    page(name: "mainPage", title: "", install: true, uninstall: true)
}

def mainPage() {
    dynamicPage(name: "mainPage") {
        section {
            input(name: "morningSwitches", type: "capability.switch", title: "Commutateurs pour les événements AM", multiple: true, required: false)
            input(name: "eveningSwitches", type: "capability.switch", title: "Commutateurs pour les événements PM", multiple: true, required: false)
            // Temps de préchauffage en minutes
            input(name: "preheatMinutes", type: "number", title: "Temps de préchauffage (minutes)", defaultValue: 0, required: true)
            input(name: "apiUrl", type: "text", title: "URL de l'API Hydro", 
                  defaultValue: "https://donnees.solutions.hydroquebec.com/donnees-ouvertes/data/json/pointeshivernales.json", required: true)
            input(name: "manualRefresh", type: "bool", title: "Activer le bouton de rafraîchissement manuel", defaultValue: true)
            input(name: "notificationDevices", type: "capability.notification", title: "Sélectionner les appareils pour les notifications", multiple: true, required: false)
            // Option pour empêcher l'extinction automatique en fin de période
            input(name: "disableAutoOff", type: "bool", title: "Ne pas éteindre automatiquement les commutateurs en fin de période", defaultValue: false, required: false)
        }
        if (settings.manualRefresh) {
            section {
                paragraph "Cliquez sur le bouton ci-dessous pour rafraîchir manuellement les données de l'API."
                input(name: "refreshButton", type: "button", title: "Rafraîchir l'API")
            }
        }
    }
}

def sendNotification(message) {
    log.info "Notification : ${message}"
    if (settings.notificationDevices) {
        settings.notificationDevices.each { device ->
            device.deviceNotification(message)
            log.info "Notification envoyée à : ${device.displayName}"
        }
    } else {
        log.warn "Aucun appareil de notification sélectionné."
    }
}

def fetchAPIData() {
    log.info "Récupération des données depuis l'API Hydro..."
    try {
        httpGet(uri: settings.apiUrl, contentType: "application/json") { response ->
            if (response.status == 200 && response.data) {
                log.info "Données de l'API reçues avec succès."
                processAPIResponse(response.data)
            } else {
                log.error "Erreur lors de la récupération des données API : ${response.status}"
            }
        }
    } catch (Exception e) {
        log.error "Erreur : ${e.message}"
    }
}

def processAPIResponse(data) {
    def today = new Date()
    def events = data?.evenements?.findAll { event ->
        return event.secteurClient == "Residentiel" && parseDateTime(event.dateDebut) >= today
    }
    if (!events || events.isEmpty()) {
        log.info "Aucun événement pertinent trouvé."
        return
    }
    def sortedEvents = events.sort { parseDateTime(it.dateDebut) }
    def nextEvent = sortedEvents.find { parseDateTime(it.dateDebut) > new Date() }
    if (!nextEvent) {
        log.info "Aucun événement à venir."
        return
    }
    state.lastEventId = nextEvent.id ?: "${nextEvent.dateDebut}-${nextEvent.dateFin}-${nextEvent.plageHoraire}"
    def startTime = parseDateTime(nextEvent.dateDebut)
    def endTime = parseDateTime(nextEvent.dateFin)
    // Calcul du préchauffage en minutes (préheatMinutes * 60000)
    def preheatTime = new Date(startTime.time - (settings.preheatMinutes * 60000))
    if (preheatTime.before(new Date())) {
        log.warn "L'heure de préchauffage est déjà passée : ${preheatTime}."
        return
    }
    def switches = (nextEvent.plageHoraire == "AM") ? settings.morningSwitches : settings.eveningSwitches
    scheduleSwitchActions(switches, preheatTime, endTime, nextEvent.plageHoraire)
}

def scheduleSwitchActions(switches, preheatTime, endTime, period) {
    log.info "Pré-chauffage planifié à : ${preheatTime}"
    if (period == "AM") {
        sendNotification("Pré-chauffage planifié pour le matin à : ${preheatTime}")
        runOnce(preheatTime, "turnOnMorningSwitches", [data: settings.morningSwitches])
    } else {
        sendNotification("Pré-chauffage planifié pour le soir à : ${preheatTime}")
        runOnce(preheatTime, "turnOnEveningSwitches", [data: settings.eveningSwitches])
    }
    if (!settings.disableAutoOff) {
        runOnce(endTime, "turnOffSwitches", [data: (settings.morningSwitches + settings.eveningSwitches)])
    } else {
        log.info "Désactivation automatique désactivée (switch non éteint)."
    }
}

def turnOnMorningSwitches(data) {
    if (settings.morningSwitches) {
        settings.morningSwitches.each { device ->
            device.on()
            log.info "Commutateur (matin) activé : ${device.displayName}"
        }
    } else {
        log.warn "Aucun commutateur matin configuré."
    }
}

def turnOnEveningSwitches(data) {
    if (settings.eveningSwitches) {
        settings.eveningSwitches.each { device ->
            device.on()
            log.info "Commutateur (soir) activé : ${device.displayName}"
        }
    } else {
        log.warn "Aucun commutateur soir configuré."
    }
}

def turnOffSwitches(data) {
    def allDevices = settings.morningSwitches + settings.eveningSwitches
    if (allDevices) {
        allDevices.each { device ->
            device.off()
            log.info "Commutateur désactivé : ${device.displayName}"
        }
    } else {
        log.warn "Aucun commutateur configuré pour la désactivation."
    }
}

def parseDateTime(dateStr) {
    try {
        return Date.parse("yyyy-MM-dd'T'HH:mm:ss", dateStr)
    } catch (Exception e) {
        log.error "Erreur lors du parsing de la date: ${e.message}"
        return null
    }
}

def installed() {
    log.info "L'application est installée."
    state.lastEventId = null
    scheduleCheck()
}

def updated() {
    log.info "L'application a été mise à jour."
    unschedule()
    scheduleCheck()
}

def scheduleCheck() {
    log.info "Planification des vérifications."
    schedule("0 0 21 * * ?", fetchAPIData)
    schedule("0 0 13 * * ?", fetchAPIData)
}

def appButtonHandler(buttonName) {
    if (buttonName == "refreshButton") {
        log.info "Rafraîchissement manuel des données via le bouton."
        fetchAPIData()
    }
}
